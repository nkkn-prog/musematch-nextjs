// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  plans         Plan[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Profile {
  id            Int      @id @default(autoincrement())
  userId        String   @unique
  user          User?     @relation(fields: [userId], references: [id])
  name          String
  bio           String?
  imageUrl      String?
  instruments   String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Plan {
  id            Int      @id @default(autoincrement())
  userId        String
  title         String
  description   String
  instruments   String[]
  thumbnailPath String?
  price         Int
  time          Int
  contract      String
	consultation  String
	cancellation  Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model Message {
  id            Int    @id @default(autoincrement())
  senderId      String
  receiverId    String
  message       String
  createdAt     DateTime  @default(now())
}

model Category {
	id            Int    @id @default(autoincrement())
	name          String
	instrument    Instrument[]
}

model Instrument {
	id            Int    @id @default(autoincrement())
	name          String
	categoryId    Int
	category      Category   @relation(fields: [categoryId], references: [id])
}